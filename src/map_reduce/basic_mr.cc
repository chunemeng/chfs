#include <algorithm>
#include <fstream>
#include <iostream>
#include <regex>
#include <string>
#include <vector>

#include "map_reduce/protocol.h"

namespace mapReduce {
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
std::vector<KeyVal> Map(const std::string &content) {
    std::vector<KeyVal> ret;
    size_t pos = 0;

    std::regex reg("[a-zA-Z]+");
    std::smatch match;
    auto iter = content.begin();

    while (std::regex_search(iter,
                             content.end(), match, reg)) {
        pos = match.position();
        std::string key = match.str();
        pos += key.size() + 1;
        std::string val = "1";
        iter += static_cast<long>(pos);
        ret.emplace_back(key, val);
    }
    return ret;
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
std::string Reduce(const std::string &key, const std::vector<std::string> &values) {
    size_t count = 0;
    for (const auto &val: values) {
        count += std::stoi(val);
    }
    return key + " " + std::to_string(count) + " ";
}

}// namespace mapReduce